# Time Series Data

# Load libraries
library(dplyr)
library(plyr)
library(tidyr)
library(zoo)
library(lubridate)

#read file
data <- read.csv("data.csv", header = TRUE)
str(data)
data$transactiondate = as.character(data$transactiondate)

#observe the distribution
boxplot(data$value)
summary(data$value)
val_IQR = IQR(data$value) #interquartile range
val_IQR

#outlier flag -- here we consider the boundary to identify outlier to be Q3+1*IQR or Q1-1*IQR
data$Outlier = ifelse(data$value > (quantile(data$value, 0.75)+(1*val_IQR)), 1,
                      ifelse(data$value < (quantile(data$value, 0.25)-(1*val_IQR)),1,0))

table(data$Outlier)

#Function to extract start and end times of outages
StartEndTimeFn <- function(x){
  for(i in 1:nrow(x)){
    if(x$Outlier[i] == 1){
      StartTime <- x$transactiondate[i]
      res[i,1] <- i
      res[i,2] <- StartTime
      if(x$Outlier[i+1]==0){
        EndTime <- x$transactiondate[i+1]
        res[i,3] <- i+1
        res[i,4] <- EndTime
      }
      else{
        i <- i+1
      }
    }
  }
  return(res)
}

#store the results in a data frame after applying the function
result_data <- StartEndTimeFn(data)
colnames(result_data) = c("StartIndex", "StartTime", "EndIndex", "EndTime")

#only keep the rows with an outage start time
outage <- subset(result_data, !is.na(result_data$StartTime))
rm(result_data)

#convert to date time stamp
outage$StartTime = as.POSIXct(outage$StartTime, format = "%Y-%m-%d %H:%M:%S", tz = Sys.timezone())
outage$EndTime = as.POSIXct(outage$EndTime, format = "%Y-%m-%d %H:%M:%S", tz = Sys.timezone())

#find the outage difference - time diff in secs
outage$OutageTimeSecs = difftime(outage$EndTime, outage$StartTime, units = "secs")

#final result can be seen as-
head(outage)

#2nd try..
# StartEndTimeFn <- function(x){
#   for(i in 1:nrow(x)){
#     if(x$Outlier[i] == 1){
#       
#       StartTime <- x$transactiondate[i]
#       res[i,1] <- i
#       res[i,2] <- StartTime
#       while(x$Outlier[i+1]==1){
#         i = i+1
#       }
#       k = i+1  
#       EndTime <- x$transactiondate[k]
#       res[i,3] <- k
#       res[i,4] <- EndTime
#       
#     }
#   }
#   return(res)
# }
# result_data <- StartEndTimeFn(data)
# colnames(result_data) = c("StartIndex", "StartTime", "EndIndex", "EndTime")


# #when the EndTime in a row is NA substitute it by the next non-null value in the list
# replaceNAby <- function(x){
#   for(i in 1:nrow(x)){
#     if(is.na(x$EndIndex[i])){
#       for(j in i+1:nrow(x)){
#         if(!is.na(x$EndIndex[j])){
#           endi <- x$EndIndex[j]
#           endt <- x$EndTime[j]
#           res[j,1] <- endi
#           res[j,2] <- endt
#         }
#       }
#     }
#   }
#   return(res)
# }
# 
# replacedata <- replaceNAby(outage)
# colnames(replacedata) <- c("Index", "EndTime")
# replacedata <- subset(replacedata, !is.na(replacedata$EndTime))
